project(QtEngine)
cmake_minimum_required(VERSION 2.8.12)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()
include_directories(${CMAKE_INCLUDE_PATH})
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)
find_package(Qt5Core CONFIG REQUIRED)
find_package(Qt5Widgets CONFIG REQUIRED)

#========Custom macros definition==========
macro(SUBDIRLIST result curdir)
  file(GLOB_RECURSE children ${curdir}/*)
  set(dirlist "")
  list(APPEND dirlist ${curdir})
  foreach(child ${children})
    if(IS_DIRECTORY ${child})
      if (${curdir} STREQUAL ${child})
        list(APPEND dirlist ${child})
      else()
        SUBDIRLIST(temp ${child})
        list(APPEND dirlist ${temp})
      endif()
    else()
      get_filename_component(DIR ${child} DIRECTORY)
      list(APPEND dirlist ${DIR})
    endif()
  endforeach()
  list(REMOVE_DUPLICATES dirlist)
  set(${result} ${dirlist})
endmacro()

macro(INC_AND_SRC incs srcs base_dir)
  SUBDIRLIST(SOURCEDIRS "${CMAKE_CURRENT_SOURCE_DIR}/${base_dir}")
  SUBDIRLIST(INCLUDEDIRS "${CMAKE_CURRENT_SOURCE_DIR}/${base_dir}")
  set(SRCS "")
  set(INCS "")
  foreach(dir ${SOURCEDIRS})
    if (IS_DIRECTORY ${dir})
      file(GLOB file ${dir}/*.cpp)
      file(GLOB res ${dir}/*.qrc)
    else ()
      file(GLOB file ${dir})
    endif()
    list(APPEND SRCS ${file})
    list(APPEND SRCS ${res})
  endforeach(dir ${SOURCEDIRS})
  foreach(idir ${INCLUDEDIRS})
    if (IS_DIRECTORY ${idir})
      list(APPEND INCS ${idir})
    endif()
  endforeach(idir ${INCLUDEDIRS})
  list(REMOVE_DUPLICATES INCS)
  list(REMOVE_DUPLICATES SRCS)
  set(${incs} ${INCS})
  set(${srcs} ${SRCS})
  list(APPEND CMAKE_AUTOUIC_SEARCH_PATHS ${INCS})
endmacro()

add_custom_target(build-time-copy-conf ALL
  COMMAND ${CMAKE_COMMAND} -E copy "qt.conf" ".."
  )

#=======QtPropertyBrowser=======
INC_AND_SRC(INCS SRCS "qtpropertybrowser")
set(QTPROPERTYBROWSER_INCS ${INCS})
add_library(qtPropertyBrowser SHARED ${SRCS})
target_link_libraries(qtPropertyBrowser ${CONAN_LIBS} Qt5::Widgets Qt5::Core)
target_include_directories(qtPropertyBrowser PRIVATE ${INCS})
target_compile_options(qtPropertyBrowser PRIVATE -Werror -Wall -Wextra)

#=======NodeEditor=======
INC_AND_SRC(INCS SRCS "nodeeditor")
set(NODEEDITOR_INCS ${INCS})
add_library(nodeEditor SHARED ${SRCS})
target_link_libraries(nodeEditor ${CONAN_LIBS} Qt5::Widgets Qt5::Core)
target_include_directories(nodeEditor PRIVATE ${INCS})
target_compile_options(nodeEditor PRIVATE -Werror -Wall -Wextra)

#=======LibraryObjects=======
INC_AND_SRC(INCS SRCS "libraryobjects")
set(LIBRARYOBJECTS_INCS ${INCS})
add_library(libraryObjects SHARED ${SRCS})
target_link_libraries(libraryObjects ${CONAN_LIBS} Qt5::Widgets Qt5::Core)
target_include_directories(libraryObjects PRIVATE ${INCS})
target_compile_options(libraryObjects PRIVATE -Werror -Wall -Wextra -g3)

#==========QtEngine==============
INC_AND_SRC(INCS SRCS "qtengine")
add_executable(qtEngine ${SRCS})
target_link_libraries(qtEngine ${CONAN_LIBS} Qt5::Widgets Qt5::Core qtPropertyBrowser nodeEditor libraryObjects)
target_include_directories(qtEngine PRIVATE ${INCS} ${QTPROPERTYBROWSER_INCS} ${NODEEDITOR_INCS} ${LIBRARYOBJECTS_INCS})
target_compile_options(qtEngine PRIVATE -Werror -Wall -Wextra -g3)
add_custom_command(TARGET qtEngine POST_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:qtEngine> ".."
  )
